name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build JAR with Docker
      run: |
        docker build -t easyfin-builder .
        docker create --name temp-container easyfin-builder
        docker cp temp-container:/app/build/libs/. ./build/libs/
        docker rm temp-container
        
    - name: Deploy to Maven Central
      run: ./gradlew jreleaserDeploy -Pversion=${{ steps.get_version.outputs.VERSION }}
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}.jar
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-sources.jar
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        prerelease: false
        files: |
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}.jar
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-sources.jar
          ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        fail_on_unmatched_files: true
    - name: Upload Sources JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_name: easyfin-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_content_type: application/java-archive
        
    - name: Upload Javadoc JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/easyfin-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_name: easyfin-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_content_type: application/java-archive
