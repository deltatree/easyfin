name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    environment: default
    permissions:
      contents: write
      packages: write
    env:
      VERSION: ${{ github.ref_name }}
      MAVEN_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
      MAVEN_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
      JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
      JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
      JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
      JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
      JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build JAR with Docker
      run: |
        mkdir -p ./build/libs
        docker build --target export --output ./build/libs .
        ls -la ./build/libs/

    - name: List built files
      run: |
        echo "Files in build/libs:"
        find ./build/libs -name "*.jar" -type f
        echo "Renaming files to include version..."
        cd ./build/libs
        for file in *.jar; do
          if [[ "$file" != *"${{ steps.get_version.outputs.VERSION }}"* ]]; then
            base="${file%.jar}"
            mv "$file" "${base}-${{ steps.get_version.outputs.VERSION }}.jar"
          fi
        done
        ls -la

    - name: Create staging directory
      run: mkdir -p build/staging-deploy

    - name: Publish to GitHub Packages
      run: ./gradlew publishMavenPublicationToGitHubPackagesRepository -Pversion=${{ steps.get_version.outputs.VERSION }}
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify JReleaser configuration
      run: ./gradlew jreleaserConfig --info -Pversion=${{ steps.get_version.outputs.VERSION }}
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}

    - name: Deploy to Maven Central
      id: maven-deploy
      run: |
        echo "Starting Maven Central deployment process..."
        ./gradlew jreleaserDeploy --info -Pversion=${{ steps.get_version.outputs.VERSION }}
        echo "Maven Central deployment process completed."
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        MAVEN_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}

    - name: Check deployment status
      if: success()
      run: |
        echo "Maven Central deployment completed successfully"
        ls -la build/staging-deploy/ || echo "No staging directory found"

    - name: Retry Maven Central Deployment if failed
      if: failure() && steps.maven-deploy.outcome == 'failure'
      run: |
        echo "Retrying Maven Central deployment..."
        sleep 30
        ./gradlew jreleaserDeploy --info -Pversion=${{ steps.get_version.outputs.VERSION }}
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        MAVEN_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: ./build/libs/*.jar
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        files: ./build/libs/*.jar
        fail_on_unmatched_files: false
